git init
git config --global user.name "phani teja"
git config --global user.email "uspteja.nag@gmail.com"

git config --list

git config --global --unset user.name
git config --global --unset user.email

git config --list

================

touch file1
ls
git status
git add file1
git status
git commit -m "label" file1
git status
git log
git show commitid

touch file2 file3 file4 file5
ls
git status
git add file2 file3 file4 file5
or 
git add .
or
git add *
or 
git add -A
git status
git commit -m "label" file-name
git commit -m "label"

=================

rm -rf file-name

git add file1  (workspace to staging)
git reset head file1 (staging to workspace)

git commit -m "label"  (staging to local repo)
git reset --soft commit-id(n-1)  (local repo to staging)

git commit -m "label" modified-file-name (workspace to local)
git reset --mixed commit-id(n-1)  (local repo to workspace)

git reset --hard commit-id  (to delete commit and data)

=================

git clone https://github.com/uspteja/batch79/blob/main/phani
ls
cd batch79
ls
touch add file1
git status
git commit -m "file1"
git log
git push
git pull --rebase
git push

===========

mkdir name-dir
ls
cd name-dir
touch f1 f2 f3
cd ..
git status
git add .
git commit -m "sample dir by name"
git push
git pull --rebase
git push

=============

git log
git log -n
git log --oneline
git log --oneline -n
git log --author=teja
git log --author=teja -n
git log --author=teja --oneline
git log --author=teja --oneline -n

==============

git log --since=yy-mm-dd
or
git log --after=yy-mm-dd

git log --until=yy-mm-dd
or
git log --before=yy-mm-dd

git log --since=yy-mm-dd --until=yy-mm-dd
or
git log --after=yy-mm-dd --before=yy-mm-dd

git log --after="yy-mm-dd 00:00" --before="yy-mm-dd 23:59"
or
git log --since="yy-mm-dd 00:00" --until="yy-mm-dd 23:59"

git log -- file file-name 

git log --grep "label"

===============

git branch
git branch release1
git checkout release1
git branch
git checkout main

git merge branch-name  (to copy data from main to release1) 

git push origin branch-name
or
git push path/of/c-repo(url) branch-name
or
add data in the config file

.git/config
==========
[branch "main"]
	remote = origin
	merge = refs/heads/main
[branch "release1"]
	remote = origin
	merge = refs/heads/release1

git branch -d branch-name  (to delete branch in local repo)
or 
git branch -D branch-name

git push origin -d branch-name (to delete in central repo)
==================

touch, cat, vi
==============

touch file1
touch file2 file3 file4

cat > file-name (to create the file)
...
....
......

ctrl+d

cat >> file-name  (to add new data to existing data)

vi editor
=========
vi file-name 
esc i (insert mode)
esc :w!(save data)
esc :q!(quit)
esc :wq!

merge vs rebase
=============
git merge branch-name
git rebase branch-name

alias
======

git status
git config --global alias.s "status"
git s

git log --oneline
git config --global alias.l1 "log --oneline"
git l1

git config --list
git config --global alias.cl "config --list"
git cl

git commit -m "test commit"
git config --global alias.cmt "commit -m "test commit""
git cmt

git config global --unset alias.cl  (to remove alias name)


git stash
=========

git stash list
git stash save "label1"
git stash show stash@{x}
git stahs show -p stash@{x}

pop, apply, drop
===============

pop= cut
=======
git stash pop  (default stash@{x})
git stash pop stash@{x}

apply= copy
=========-
git stash apply
git stash apply stash@{x}

drop= delete
===========
git stash drop
git stash drop stash@{x}

git tag
=======
git tag
git tag t-1.0
git show t-1.0
git tag -d t-1.0 (delete in local repo)
git tag t-1.0 commit-id
git checkout t-1.0
git checkout main
git push origin t-1.0
git push --tags (all tags)
git push origin -d t-1.0 (delete in central repo)

Fork
====


git cherry-pick
===============
git cherry-pick commit-id

git diff
=========
git diff file1 file2
git branch branch1 branch2
git diff file1

git revert
==========



